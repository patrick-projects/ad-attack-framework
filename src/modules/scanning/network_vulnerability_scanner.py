"""
Network Vulnerability Scanner Module

This module provides comprehensive vulnerability scanning capabilities using:
- nmap with vulners script for CVE detection
- Additional NSE scripts for specific vulnerability checks
- Service version detection and vulnerability correlation
- Severity-based vulnerability categorization (Critical/High/Medium/Low)

Key Features:
- Asynchronous scanning with progress updates
- Integration with multiple vulnerability databases
- Detailed vulnerability reporting
- Service-specific vulnerability checks
"""

from typing import Optional, Callable, Dict, List
import subprocess
import json
import xml.etree.ElementTree as ET
from datetime import datetime
import threading
import re
from pathlib import Path
import tempfile
import logging

class NetworkVulnerabilityScanner:
    def __init__(self):
        self.stop_scan = False
        self.scan_thread = None
        self.results = {
            'services': [],
            'vulnerabilities': [],
            'scan_info': {
                'start_time': None,
                'end_time': None,
                'scan_type': None
            }
        }
        self.logger = logging.getLogger(__name__)
        
    def scan_target(self, target: str, scan_type: str = 'basic', callback: Optional[Callable] = None) -> bool:
        """
        Perform vulnerability scan on target
        
        Args:
            target: Target IP/network
            scan_type: Type of scan ('basic', 'full', 'targeted')
            callback: Optional callback for real-time updates
            
        Returns:
            bool: True if scan started successfully
        """
        self.stop_scan = False
        self.results['scan_info']['start_time'] = datetime.now().isoformat()
        self.results['scan_info']['scan_type'] = scan_type
        
        def scan_thread():
            try:
                # Create temporary file for nmap output
                with tempfile.NamedTemporaryFile(suffix='.xml', delete=False) as tmp:
                    nmap_xml = tmp.name
                
                # Build nmap command based on scan type
                cmd = ['nmap', '-sV']
                
                if scan_type == 'basic':
                    cmd.extend([
                        '--script', 'vulners,vulscan,vuln',
                        '-F'  # Fast scan
                    ])
                elif scan_type == 'full':
                    cmd.extend([
                        '--script', 'vulners,vulscan,vuln,auth,default',
                        '-p-'  # All ports
                    ])
                elif scan_type == 'targeted':
                    cmd.extend([
                        '--script', 'vulners,vulscan,vuln,auth,default,exploit',
                        '-p', '21-23,25,53,80,110-111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080'
                    ])
                
                cmd.extend(['-oX', nmap_xml, target])
                
                # Run scan
                self.logger.info(f"Starting vulnerability scan: {' '.join(cmd)}")
                process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                
                while not self.stop_scan:
                    output = process.stdout.readline()
                    if not output and process.poll() is not None:
                        break
                    
                    if output and callback:
                        callback('progress', {'message': output.decode().strip()})
                
                if not self.stop_scan:
                    # Parse results
                    self._parse_nmap_results(nmap_xml, callback)
                    
                    # Run service-specific checks
                    self._run_service_checks(target, callback)
                    
                    # Update scan info
                    self.results['scan_info']['end_time'] = datetime.now().isoformat()
                    
                    if callback:
                        callback('complete', self.results)
                
                # Cleanup
                Path(nmap_xml).unlink()
                
            except Exception as e:
                self.logger.error(f"Scan error: {str(e)}")
                if callback:
                    callback('error', {'error': str(e)})
        
        self.scan_thread = threading.Thread(target=scan_thread)
        self.scan_thread.start()
        return True
    
    def _parse_nmap_results(self, xml_file: str, callback: Optional[Callable] = None):
        """Parse nmap XML output and extract vulnerabilities"""
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            
            for host in root.findall('.//host'):
                addr = host.find('.//address').get('addr')
                
                # Process each port
                for port in host.findall('.//port'):
                    if port.get('state') == 'open':
                        port_id = port.get('portid')
                        service = port.find('.//service')
                        
                        if service is not None:
                            service_info = {
                                'host': addr,
                                'port': port_id,
                                'service': service.get('name'),
                                'product': service.get('product', ''),
                                'version': service.get('version', ''),
                                'timestamp': datetime.now().isoformat()
                            }
                            self.results['services'].append(service_info)
                            
                            if callback:
                                callback('discovery', {
                                    'type': 'service',
                                    **service_info
                                })
                            
                            # Process vulnerability scripts
                            for script in port.findall('.//script'):
                                script_id = script.get('id')
                                if script_id in ['vulners', 'vulscan', 'vuln']:
                                    self._parse_vuln_script(
                                        script_id,
                                        addr,
                                        port_id,
                                        service_info['service'],
                                        script.get('output'),
                                        callback
                                    )
        
        except Exception as e:
            self.logger.error(f"Error parsing nmap results: {str(e)}")
    
    def _parse_vuln_script(self, script_id: str, host: str, port: str, service: str, 
                          output: str, callback: Optional[Callable] = None):
        """Parse vulnerability script output"""
        try:
            if script_id == 'vulners':
                # Parse CVE entries with CVSS scores
                cve_pattern = r'(CVE-\d{4}-\d+)\s+(\d+\.\d+)\s+(.+)'
                for line in output.split('\n'):
                    match = re.search(cve_pattern, line)
                    if match:
                        self._add_vulnerability({
                            'host': host,
                            'port': port,
                            'service': service,
                            'source': 'vulners',
                            'type': 'cve',
                            'id': match.group(1),
                            'cvss_score': float(match.group(2)),
                            'description': match.group(3).strip()
                        }, callback)
            
            elif script_id == 'vulscan':
                # Parse vulnerability database matches
                vuln_pattern = r'\[(.*?)\]\s+\[(.*?)\]\s+(.+)'
                for line in output.split('\n'):
                    match = re.search(vuln_pattern, line)
                    if match:
                        self._add_vulnerability({
                            'host': host,
                            'port': port,
                            'service': service,
                            'source': 'vulscan',
                            'type': match.group(1),
                            'id': match.group(2),
                            'description': match.group(3).strip()
                        }, callback)
            
            elif script_id == 'vuln':
                # Parse general vulnerability checks
                for line in output.split('\n'):
                    if '|' in line:
                        vuln_id, description = line.split('|', 1)
                        self._add_vulnerability({
                            'host': host,
                            'port': port,
                            'service': service,
                            'source': 'nmap-vuln',
                            'type': 'general',
                            'id': vuln_id.strip(),
                            'description': description.strip()
                        }, callback)
        
        except Exception as e:
            self.logger.error(f"Error parsing vulnerability script output: {str(e)}")
    
    def _add_vulnerability(self, vuln: Dict, callback: Optional[Callable] = None):
        """Add vulnerability to results with severity classification"""
        try:
            # Determine severity
            if 'cvss_score' in vuln:
                if vuln['cvss_score'] >= 9.0:
                    severity = 'Critical'
                elif vuln['cvss_score'] >= 7.0:
                    severity = 'High'
                elif vuln['cvss_score'] >= 4.0:
                    severity = 'Medium'
                else:
                    severity = 'Low'
            else:
                severity = 'Unknown'
            
            vuln['severity'] = severity
            vuln['timestamp'] = datetime.now().isoformat()
            
            self.results['vulnerabilities'].append(vuln)
            
            if callback:
                callback('vulnerability', vuln)
        
        except Exception as e:
            self.logger.error(f"Error adding vulnerability: {str(e)}")
    
    def _run_service_checks(self, target: str, callback: Optional[Callable] = None):
        """Run additional service-specific vulnerability checks"""
        try:
            for service in self.results['services']:
                service_name = service['service']
                
                # Add specific checks based on service type
                if service_name == 'http' or service_name == 'https':
                    self._check_web_vulnerabilities(service, callback)
                elif service_name == 'smb':
                    self._check_smb_vulnerabilities(service, callback)
                elif service_name == 'ssh':
                    self._check_ssh_vulnerabilities(service, callback)
        
        except Exception as e:
            self.logger.error(f"Error in service checks: {str(e)}")
    
    def _check_web_vulnerabilities(self, service: Dict, callback: Optional[Callable] = None):
        """Check for web-specific vulnerabilities"""
        try:
            cmd = [
                'nmap',
                '-p', service['port'],
                '--script', 'http-vuln*',
                service['host']
            ]
            
            process = subprocess.run(cmd, capture_output=True, text=True)
            
            if process.stdout:
                self._parse_vuln_script(
                    'http-vuln',
                    service['host'],
                    service['port'],
                    service['service'],
                    process.stdout,
                    callback
                )
        
        except Exception as e:
            self.logger.error(f"Error checking web vulnerabilities: {str(e)}")
    
    def _check_smb_vulnerabilities(self, service: Dict, callback: Optional[Callable] = None):
        """Check for SMB-specific vulnerabilities"""
        try:
            cmd = [
                'nmap',
                '-p', service['port'],
                '--script', 'smb-vuln*',
                service['host']
            ]
            
            process = subprocess.run(cmd, capture_output=True, text=True)
            
            if process.stdout:
                self._parse_vuln_script(
                    'smb-vuln',
                    service['host'],
                    service['port'],
                    service['service'],
                    process.stdout,
                    callback
                )
        
        except Exception as e:
            self.logger.error(f"Error checking SMB vulnerabilities: {str(e)}")
    
    def _check_ssh_vulnerabilities(self, service: Dict, callback: Optional[Callable] = None):
        """Check for SSH-specific vulnerabilities"""
        try:
            cmd = [
                'nmap',
                '-p', service['port'],
                '--script', 'ssh-vuln*',
                service['host']
            ]
            
            process = subprocess.run(cmd, capture_output=True, text=True)
            
            if process.stdout:
                self._parse_vuln_script(
                    'ssh-vuln',
                    service['host'],
                    service['port'],
                    service['service'],
                    process.stdout,
                    callback
                )
        
        except Exception as e:
            self.logger.error(f"Error checking SSH vulnerabilities: {str(e)}") 